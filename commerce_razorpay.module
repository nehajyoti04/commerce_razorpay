<?php
use Razorpay\Api\Api;

/**
 * Implements hook_menu().
 */
function commerce_razorpay_menu() {

  $items['razorpay-checkout'] = array(
    'title' => 'Administration menu',
    'description' => 'Adjust administration menu settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_razorpay_checkout_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'commerce_razorpay.checkout.inc',
  );

  $items['capture-payment'] = array(
    'title' => 'Capture Payement',
    'description' => 'Adjust administration menu settings.',
    'page callback' => 'commerce_razorpay_capture_payment',
    'access arguments' => array('administer site configuration'),
  );

  // Add a menu item for refunding authorizations.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/razorpay-refund'] = array(
    'title' => 'Refund',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_razorpay_refund_form', 3, 5),
    'access callback' => 'commerce_razorpay_refund_access',
    'access arguments' => array(3, 5),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 2,
    'file' => 'includes/commerce_razorpay.admin.inc',
  );
  return $items;
}

/**
 * Administration forms form payment method.
 */
function commerce_razorpay_settings_form($settings = NULL) {
  $form = array();
  $settings = (array) $settings + array(
    'key_id' => '',
    'key_secret' => '',
    'url' => '',
  );
  $form['key_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Key ID'),
    '#default_value' => $settings['key_id'],
  );
  $form['key_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Key Secret'),
    '#default_value' => $settings['key_secret'],
  );
  $url = array(0 => t('Test'),1 => t('Production'));
  $form['url'] = array(
    '#type' => 'radios',
    '#title' => t('Base URI'),
    '#options' => $url,
    '#default_value' => $settings['url'],
  );
  return $form;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_razorpay_commerce_payment_method_info() {
  // $icon = _commerce_payumoney_icons();
  $display_title = t('Razorpay');
  $payment_methods = array();
  $payment_methods['commerce_razorpay'] = array(
    'title' => t("RazorPay"),
    'display_title' => $display_title,
    'short_title' => 'RazorPay Payment Gateway',
    'description' => t("RazorPay Payment Gateway"),
    'active' => TRUE,
    'terminal' => TRUE,
    'offsite' => TRUE,
    'offsite_autoredirect' => FALSE,
  );
  return $payment_methods;
}

/**
 * Implements CALLBACK_commerce_payment_method_redirect_form().
 */
function commerce_razorpay_redirect_form($form, &$form_state, $order, $payment_method) {
  global $base_url;
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $billing_address = $wrapper->commerce_customer_billing->commerce_customer_address->value();
  $commerce_order_id = $order->order_id;
  $key_id = $payment_method['settings']['key_id'];
  $key_secret = $payment_method['settings']['key_secret'];

  $currency = $wrapper->commerce_order_total->currency_code->value();
  $amount = $wrapper->commerce_order_total->amount->value();
  $receipt = "test_1";
  $payment_capture = false;
  $notes  = '';

  $razorpay_order = razorpay_order($amount, $key_id, $key_secret, $currency, $receipt, $payment_capture, $notes);
  $merchant_order_id = $razorpay_order->id;
  $order->data['merchant_order_id'] = $merchant_order_id;
  $order->data['payment_method_instance_id'] = $payment_method['instance_id'];
  commerce_order_save($order);

  $form['help']['#markup'] = '<div class="checkout-help">' . t('Please wait while you are redirected to the payment server. If nothing happens within 10 seconds, please click on the button below.') . '</div>';

  $form['razor_payment_id'] = array(
    '#attributes' => array('id' => 'razor-payment-id'),
     '#type' => 'hidden',
     '#value' => '',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#id' => 'rzp-button1',
    '#value' => t('Proceed to payment'),
  );
  $form['#attached']['js'][] = "https://checkout.razorpay.com/v1/checkout.js";

  drupal_add_js(array('commerce_razorpay' => array('amount' => $amount, 'key' => $key_id, 'logo' => $base_url . "/" . drupal_get_path('module', 'commerce_razorpay') .'/logo.jpg', 'order_id' => $merchant_order_id, 'commerce_order_id' => $commerce_order_id, 'payment_settings' => $payment_method['settings'], 'billing_address' => $billing_address)), array('type' => 'setting'));

  $form['#attached']['js'][] = drupal_get_path('module', 'commerce_razorpay') . '/commerce_razorpay.js';

  return array(
    'form' => array(
      '#type' => 'markup',
      '#markup' => drupal_render($form),
    ),
  );

}

/**
 * Creates an example payment transaction for the specified charge amount.
 *
 * @param $payment_method
 *   The payment method instance object used to charge this payment.
 * @param $order
 *   The order object the payment applies to.
 * @param $charge
 *   An array indicating the amount and currency code to charge.
 */
function commerce_razorpay_transaction($key_id, $key_secret, $order) {

  require 'libraries/razorpay-php/Razorpay.php';
  $api = new Api($key_id, $key_secret);

  // Need to store razorpay payment id in transaction .. this all is hit and trial.
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $currency = $wrapper->commerce_order_total->currency_code->value();
  $amount = $wrapper->commerce_order_total->amount->value();

  $payment = $api->order->fetch($order->data['merchant_order_id']);
  $payment_object = $payment->payments();
  $status = $payment_object['items'][0]->status; // eg : refunded, captured, authorized, failed.
  $refund_status = $payment_object['items'][0]->refund_status; // eg : full, partial
  $amount_refunded = ($payment_object['items'][0]->amount_refunded)/100;
  $service_tax = $payment_object['items'][0]->service_tax;
  // card_id
  //  @TODO Save Card details , method of payement etc.

  $transaction = commerce_payment_transaction_new('commerce_razorpay', $order->order_id);
  // $transaction->instance_id = $payment_method['instance_id'];
  $transaction->instance_id = $order->data['payment_method_instance_id'];
  $transaction->amount = $amount;
  $transaction->currency_code = $currency;
  $transaction->remote_id = $payment_object['items'][0]->id;
  // $transaction->remote_id = $txnid;
  $instance = explode('|', $transaction->instance_id);
  $transaction->payment_method = $instance[0];
  // $transaction->message = '';
  //  @TODO Update transaction message .
  $transaction->message = 'Razorpay ....';
  $transaction->message_variables = '';

  // Succeessful.
  if ($status == "captured") {
    // Status is success.
    $transaction->remote_status = t('Success');
    $transaction->message = t('Your transation ID is :') . t('. Payment received at') . ' ' . date("d-m-Y H:i:s", REQUEST_TIME);
    $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  }
  elseif ($status == "authorized") {
    // Batch process - Pending orders.
    $transaction->remote_status = t('Pending');
    $transaction->message = t('Your transation ID is :') . t('. Payment pending at') . ' ' . date("d-m-Y H:i:s", REQUEST_TIME);
    $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
  }
  elseif ($status == "failed") {
    // Failed transaction.
    $transaction->remote_status = t('Failure');
    $transaction->message = t('Your transation ID is :') . t('. Payment failed at') . ' ' . date("d-m-Y H:i:s", REQUEST_TIME);
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
  }
  commerce_payment_transaction_save($transaction);
}


function commerce_razorpay_capture_payment($payment_id = '') {
  $payment_id = $_GET['payment_id'];
  $amount = $_GET['amount'];
  $commerce_order_id = $_GET['order_id'];
  $order_id = '';
  $payment_settings = json_decode($_GET['payment_settings']);

  $payment = capture_payment($payment_id, $amount, $order_id, $payment_settings);

  $response = json_decode($_GET['response']);

  $razorpay_signature = $response->razorpay_signature;
  $razorpay_payment_id = $response->razorpay_payment_id;
  $razorpay_order_id = $response->razorpay_order_id;
  $key_id = $payment_settings->key_id;
  $key_secret = $payment_settings->key_secret;

  $order = commerce_order_load($commerce_order_id);
  $order->data['razorpay_payment_id'] = $payment_id;
  // $order->data['merchant_order_id'] = $razorpay_order_id;
  commerce_order_save($order);


  commerce_razorpay_transaction($key_id, $key_secret, $order);
  // Send the customer on to the next checkout page.
  // @TODO validate  signatures.
  // hash_hmac('sha256', 'Message', 'secret', true);
  $generated_signature = hash_hmac('sha256', $razorpay_order_id + "|" + $razorpay_payment_id, $key_secret);
  // $generated_signature = hmac_sha256($razorpay_order_id + "|" + $razorpay_payment_id, $secret);

    if ($generated_signature == $razorpay_signature) {
      // payment is successful
    }
    // DO not need to  save order after order_status_update because 3rd arg is by default FALSE.
  commerce_order_status_update($order, 'checkout_complete');
  drupal_goto("checkout/".$commerce_order_id."/complete");
}

/**
 * Determines access to the prior authorization capture form for Amex
 *   hosted credit card transactions.
 *
 * @param $order
 *   The order the transaction is on.
 * @param $transaction
 *   The payment transaction object to be captured.
 *
 * @return
 *   TRUE or FALSE indicating capture access.
 */
function commerce_razorpay_refund_access($order, $transaction) {
  return TRUE;
}


/**
 * Refund a transaction
 * @param object $capture_transaction
 *   Transaction to be refunded
 * @param decimal $amount
 *   Ammount to be refunded as a decimal
 * @return boolean
 */
function commerce_razorpay_refund_transaction($capture_transaction, $amount, $order, $payment_method) {
  $return = FALSE;
  require 'libraries/razorpay-php/Razorpay.php';
  $key_id = $payment_method['settings']['key_id'];
  $key_secret = $payment_method['settings']['key_secret'];
  $api = new Api($key_id, $key_secret);
  $instance_id = $capture_transaction->instance_id;
  $payment_method = commerce_payment_method_instance_load($instance_id);

  $transaction = commerce_payment_transaction_new('commerce_razorpay', $capture_transaction->order_id);
  $transaction->amount = - commerce_currency_decimal_to_amount($amount, $capture_transaction->currency_code);
  $transaction->currency_code = $capture_transaction->currency_code;
  $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->remote_id = $capture_transaction->remote_id;

  commerce_payment_transaction_save($transaction);
  // @TODO Update transaction data/ CROSS check transaction all the columns.
  $payment = $api->order->fetch($order->data['merchant_order_id']);
  $payment_object = $payment->payments();
  $status = $payment_object['items'][0]->status; // eg : refunded, captured
  $refund_status = $payment_object['items'][0]->refund_status; // eg : full, partial
  $amount_refunded = ($payment_object['items'][0]->amount_refunded)/100;

  switch ($status) {
    case 'refunded':
      $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
      // $transaction->remote_status = $result->response->gatewayCode;
      $transaction->remote_status = $status;
      $transaction->message = 'Refunded';
      drupal_set_message(t('Transaction was processed succesfully'));
      $return = TRUE;
      break;
    case 'partial':
      $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $transaction->remote_status = $status;
      $transaction->message = 'Refunded';
      drupal_set_message(t('Transaction was processed succesfully, Partial refund of amount'. $amount_refunded .' was done'));
      $return = TRUE;
      break;
    case 'PENDING':
      $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
      $transaction->remote_status = $result->response->gatewayCode;
      $transaction->message = $result->response->acquirerMessage;
      drupal_set_message(t('Transaction pending'));
      $return = TRUE;
      break;
    case 'FAILURE':
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      $transaction->remote_status = $result->response->gatewayCode;
      $transaction->message = $result->response->acquirerMessage;
      break;
    case 'UNKNOWN':
      drupal_set_message(t('There was a problem processing your transaction. Your credit/debit card was not charged. Please try again later.'), 'error');
      break;
    case 'ERROR':
      $transaction = _commerce_razorpay_error_process($result, $transaction);
      break;
  }

  commerce_payment_transaction_save($transaction);
  return $return;
}

function _commerce_razorpay_error_process($result, $transaction) {
  if (isset($result->error)) {
    $transaction->remote_status = $result->error->cause;
    switch ($transaction->remote_status) {
      case 'INVALID_REQUEST':
      case 'SERVER_BUSY':
        $transaction->message = $result->error->explanation;
        break;
      case 'REQUEST_REJECTED':
        $transaction->message = 'Request rejected: Code ' . $result->error->supportCode;
        break;
      case 'SERVER_FAILED':
        $transaction->message = 'Remote server error.';
        break;
    }
    commerce_payment_transaction_save($transaction);
  }
  return $transaction;
}

/**
 * Create an order.
 * @return [type] [description]
 */
function razorpay_order($amount, $key_id, $key_secret, $currency, $receipt, $payment_capture, $notes = '') {
  require 'libraries/razorpay-php/Razorpay.php';
  $api = new Api($key_id, $key_secret);
  $order = $api->order->create(array('amount' => $amount, "currency" => $currency, "receipt" => $receipt, 'payment_capture' => $payment_capture));

   return $order;
}

function capture_payment($payment_id, $amount = '', $order_id = '', $payment_settings = '') {
  require 'libraries/razorpay-php/Razorpay.php';
  $key_id = $payment_settings->key_id;
  $key_secret = $payment_settings->key_secret;
  $api = new Api($key_id, $key_secret);
  $amount = $_GET['amount'];
  $payment = $api->payment->fetch($payment_id);
  $payment->capture(array('amount' => $amount));
  $order_id = $_GET['order_id'];
  // Success URL: checkout/ORDER_ID/payment/return/ORDER_PAYMENT_REDIRECT_KEY
  // @TODO Redirect as per success and failure url.
  if($payment->status == 'authorized') {
  } else {
  }
  // Fail URL: checkout/ORDER_ID/payment/back/ORDER_PAYMENT_REDIRECT_KEY

  return $payment;
}
