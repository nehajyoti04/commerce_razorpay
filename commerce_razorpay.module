<?php
use Razorpay\Api\Api;
// use Drupal\Razorpay\Api;
// namespace  Razorpay\Api;
// use Razorpay\Api;
// namespace Razorpay\Api;
// function theme_preprocess_html(&$var) {
//       $script = array(
//         '#tag' => 'script',
//         '#attributes' => array('type' => 'text/javascript'),
//         '#value' => 'Add your javascript here',
//        );
//        drupal_add_html_head($script, 'script');
//     }

/**
 * Administration forms form payment method.
 */
function commerce_razorpay_settings_form($settings = NULL) {
  $form = array();
  $settings = (array) $settings + array(
    'key_id' => '',
    'key_secret' => '',
    'url' => '',
  );
  $form['key_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Key ID'),
    '#default_value' => $settings['key_id'],
  );
  $form['key_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Key Secre'),
    '#default_value' => $settings['key_secret'],
  );
  $url = array(0 => t('Test'),1 => t('Production'));
  $form['url'] = array(
    '#type' => 'radios',
    '#title' => t('Base URI'),
    '#options' => $url,
    '#default_value' => $settings['url'],
  );
  return $form;
}

/**
 * Implements hook_menu().
 */
function commerce_razorpay_menu() {

$items['razorpay-checkout'] = array(
    'title' => 'Administration menu',
    'description' => 'Adjust administration menu settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_razorpay_checkout_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'commerce_razorpay.checkout.inc',
  );

$items['capture-payment'] = array(
    'title' => 'Capture Payement',
    'description' => 'Adjust administration menu settings.',
    'page callback' => 'commerce_razorpay_capture_payment',
    'access arguments' => array('administer site configuration'),
  );
return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_razorpay_commerce_payment_method_info() {
  // $icon = _commerce_payumoney_icons();
  $display_title = t('Razorpay');
  $payment_methods = array();
  $payment_methods['commerce_razorpay'] = array(
    'title' => t("RazorPay"),
    'display_title' => $display_title,
    'short_title' => 'RazorPay Payment Gateway',
    'description' => t("RazorPay Payment Gateway"),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );
  return $payment_methods;
}


function commerce_razorpay_capture_payment($payment_id = '') {
  $payment_id = $_GET['payment_id'];
  $amount = $_GET['amount'];
$payment = capture_payment($payment_id, $amount);
print '<pre>'; print_r("payment"); print '</pre>';
print '<pre>'; print_r($payment); print '</pre>'; exit;

}

function get_payments($count = 2, $skip = 1, $from = 1400826740) {
  $api = new Api('rzp_test_ipkgumBJtJrvd1', 'AYnJYk0QEcW0LKJLuARDQ3Ti');
  $params = array(
      'count' => 2,
      'skip'  => 1,
      'from'  => 1400826740,
      'order'
  );

  $payments = $api->payment->all($params);

}

function capture_payment($payment_id, $amount = 100, $order_id = 1) {

  // print '<pre>'; print_r("payment id"); print '</pre>';
  // print '<pre>'; print_r($_POST['payment_id']); print '</pre>';

  // echo json_encode(array("payment_id"=>$_POST['payment_id']));
  $fb_lib_path = function_exists('libraries_get_path') ? libraries_get_path('razorpay-php') : 'sites/all/libraries/razorpay-php';

  require 'libraries/razorpay-php/Razorpay.php';
  // require '/var/www/npro/libraries/razorpay-php/Razorpay.php';

  $api = new Api('rzp_test_ipkgumBJtJrvd1', 'AYnJYk0QEcW0LKJLuARDQ3Ti');

$payment = $api->payment->fetch($payment_id);
$payment->capture(array('amount' => $amount));
$order_id = $_GET['order_id'];
// Success URL: checkout/ORDER_ID/payment/return/ORDER_PAYMENT_REDIRECT_KEY
if($payment->status == 'authorized') {
  drupal_goto('checkout/'. $order_id . "/payment/return/". $payment_id);
} else {
  print '<pre>'; print_r("payment status"); print '</pre>';
  print '<pre>'; print_r($payment->status); print '</pre>'; exit;
}
// Fail URL: checkout/ORDER_ID/payment/back/ORDER_PAYMENT_REDIRECT_KEY


return $payment;
}
/**
 * Retrieve a refund of payment by id.
 * @param  {[type]} $payment_id [description]
 * @param  {[type]} $refund_id  [description]
 * @return {[type]}             [description]
 */

function razorpay_payment_refund($payment_id = 'pay_29QQoUBi66xm2f', $refund_id = 'rfnd_AABBdHIieexn5c') {


  $api = new Api('rzp_test_26ccbdbfe0e84b', '69b2e24411e384f91213f22a');

  $payment = $api->payment->fetch($payment_id)->refunds()->fetch($refund_id);

}

function razorpay_payment_all_refunds($payment_id = 'pay_29QQoUBi66xm2f', $from = 1500826740, $to = 1500826760, $count = 2, $skip = 1) {
  $api = new Api('rzp_test_26ccbdbfe0e84b', '69b2e24411e384f91213f22a');

  $params = array(
      'from'  => 1500826740,
      'to'    => 1500826760,
      'count' => 2,
      'skip'  => 1
  );

  $payments = $api->payment->fetch($payment_id)->refunds()->all($params);

}

/**
 * Create an order.
 * @return [type] [description]
 */
function create_an_order() {

// $library = libraries_load('razorpay-php');
// dpm("library");
// dpm($library);
$name = 'razorpay-php';
// if (($library = libraries_load($name)) && !empty($library['loaded'])) {

  $fb_lib_path = function_exists('libraries_get_path') ? libraries_get_path('razorpay-php') : 'sites/all/libraries/razorpay-php';

  // require '/var/www/npro/libraries/razorpay-php/Razorpay.php';
  require 'libraries/razorpay-php/Razorpay.php';
  // require DRUPAL_ROOT ."/". $fb_lib_path.'/Razorpay.php';
  // require(libraries_get_path('razorpay-php') . '/Razorpay.php');

  // @include DRUPAL_ROOT ."/". $fb_lib_path.'/Razorpay.php';
  //
  //
  // require_once DRUPAL_ROOT ."/". $fb_lib_path.'/Razorpay.php';
  // require_once(libraries_get_path('razorpay-php') . '/src/Api.php');
  // include('/var/www/npro/libraries/razorpay-php/src/Api.php');
// }
//  $fb_platform = $fb_lib_path . '/src/Api.php';
 // watchdog('commerce_razorpay fb platform', $fb_platform);
 // dpm("fb platform");
 // dpm($fb_platform);
 // include($fb_lib_path);
 // include($fb_lib_path.'/Razorpay.php');
 // include('sites/all/libraries/razorpay-php/Razorpay.php');
 // include($fb_lib_path.'/src/Api.php');
 // libraries_load($fb_lib_path);
 // require_once (libraries_get_path('razorpay-php') . '/src/Api.php');
 // include_once($fb_lib_path);
 // include_once('/Applications/MAMP/bin/php/php5.6.10/lib/php');
 // require_once DRUPAL_ROOT ."/".$fb_lib_path;
 // libraries_load('razorpay-php');
 // require($fb_lib_path.'/src/Api.php');
 // drupal_add_library('commerce_razorpay', 'razorpay-php', TRUE);
 // watchdog('commerce_razorpay - api', !class_exists('Api'));
 // watchdog('commerce_razorpay - include', !@include($fb_platform));

 // require DRUPAL_ROOT ."/". $fb_lib_path.'/Razorpay.php';
// require_once DRUPAL_ROOT ."/". $fb_lib_path.'/src/Api.php';
// $api = new Api('razorpay-php', 'sites/all/libraries');
$api = new Api('rzp_test_ipkgumBJtJrvd1', 'AYnJYk0QEcW0LKJLuARDQ3Ti');
$order = $api->order->create(array('amount' => 100, "currency" => "INR", "receipt" => "test_1"));
// print '<pre>'; print_r("order"); print '</pre>';
//      print '<pre>'; print_r($order); print '</pre>';exit;
// print '<pre>'; print_r("api"); print '</pre>';
//      print '<pre>'; print_r($api); print '</pre>';exit;

// $api = new Api('rzp_test_26ccbdbfe0e84b', '69b2e24411e384f91213f22a');
     // $order = $api->order->create(array('amount' => 100, "currency", "INR", "receipt", "test_1", "payment_capture", false));
     // print '<pre>'; print_r("order"); print '</pre>';
     // print '<pre>'; print_r($order); print '</pre>';exit;
     return $order;


 try {
     // if (!class_exists('Api') && !@include($fb_platform)) {
     if(!@include($fb_platform)){
      //show error
      watchdog('commerce_razorpay', 'class does not exist');
      return NULL;
     }
     // $fb = new Facebook(array(
     //   'appId' => $appId,
     //   'secret' => $secret,
     //   'cookie' => $cookie));
     $api = new Api('rzp_test_26ccbdbfe0e84b', '69b2e24411e384f91213f22a');
     $order = $api->order->create(array('amount' => 100, "currency", "INR", "receipt", "test_1", "payment_capture", false));
     // print '<pre>'; print_r("order"); print '</pre>';
     // print '<pre>'; print_r($order); print '</pre>';exit;
     return $order;
 }
 catch (Exception $e) {}


// drupal_add_library('razorpay-php', 'Razorpay.php');
// drupal_add_library('razorpay-php', 'Api.php');
// $api = new Api('rzp_test_26ccbdbfe0e84b', '69b2e24411e384f91213f22a');
$order = $api->order->create(array('amount' => 100, "currency", "INR", "receipt", "test_1", "payment_capture", false));


// $refund = $payment->create();

return $order;
}




/**
 * Implements hook_redirect_form().
 */
function commerce_razorpay_redirect_form($form, &$form_state, $order, $payment_method) {

  // dpm("hook redirect called");
  // dpm("order");
  // dpm($order);
  // dpm("payment method");
  // dpm($payment_method);
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $billing_address = $wrapper->commerce_customer_billing->commerce_customer_address->value();

  // Set all data in array.
  $data = array(
    'key' => $payment_method['settings']['key_id'],
    'amount' => $wrapper->commerce_order_total->amount->value() / 100,
    'productinfo' => 'Product order ID:' . $order->order_id,
    'name' => $billing_address['name_line'],
    'email' => $order->mail,
    'phone' => $billing_address['pm_phone'],
    'furl' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
    'surl' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
  );
  // Peform phone verification if its all digits otherwise go back.
  // if (!preg_match('/^\d{10}$/', $data['phone'])) {
  //   drupal_set_message(t('Phone number should be 10 digit number.'), 'error');
  //   commerce_payment_redirect_pane_previous_page($order);
  //   return '';
  // }
  // Check if all data are available else generate hash.
  if (!isset($data['key'])) {
    drupal_set_message(t('Required Information are not available. Please Try again...'), 'error');
    commerce_payment_redirect_pane_previous_page($order);
    return '';
  }
  // else {

  // // Redirect URI.
  // if (($payment_method['settings']['url']) == 1) {
  //   $url = url('https://secure.payu.in/_payment');
  // }
  // else {
  //   $url = url('https://test.payu.in/_payment');
  // }

 // capture_payment($payment_id, $amount = 100, $order_id = 1);
  if (isset($hash)) {
    $form['#action'] = $url;
  }
  else {
    drupal_set_message(t('Critical Information not generated. Please Try again.'), 'error');
    commerce_payment_redirect_pane_previous_page($order);
    return '';
  }
  return $form;
}
