<?php
use Razorpay\Api\Api;

/**
 * Implements hook_menu().
 */
function commerce_razorpay_menu() {

  $items['razorpay-checkout'] = array(
    'title' => 'Administration menu',
    'description' => 'Adjust administration menu settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_razorpay_checkout_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'commerce_razorpay.checkout.inc',
  );

  $items['capture-payment'] = array(
    'title' => 'Capture Payement',
    'description' => 'Adjust administration menu settings.',
    'page callback' => 'commerce_razorpay_capture_payment',
    'access arguments' => array('administer site configuration'),
  );

  // Add a menu item for refunding authorizations.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/razorpay-refund'] = array(
    'title' => 'Refund',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_razorpay_refund_form', 3, 5),
    'access callback' => 'commerce_razorpay_refund_access',
    'access arguments' => array(3, 5),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 2,
    'file' => 'includes/commerce_razorpay.admin.inc',
  );

  $items['test-razorpay'] = array(
    'page callback' => 'test_commerce_razorpay',
    'access callback' => TRUE,
  );

  return $items;
}

function test_commerce_razorpay() {
  $output = "hello";
  require 'libraries/razorpay-php/Razorpay.php';
  // use Razorpay\Api\Api;
  // $key_id = $payment_method['settings']['key_id'];
  // $key_secret = $payment_method['settings']['key_secret'];

  $key_id = 'rzp_test_6VOiSPZ8ClqeCo';
  $key_secret = 'HSFl7YizDJttZmxHi2a3123T';

  $api = new Api($key_id, $key_secret);

  $order_id = 'order_7Sy38tIy4TSFsI';



  $payment = $api->order->fetch($order_id);
  $payment_object = $payment->payments();
  print '<pre>'; print_r("order"); print '</pre>';
  print '<pre>'; print_r($order); print '</pre>';

  print '<pre>'; print_r("payment"); print '</pre>';
  print '<pre>'; print_r($payment_object); print '</pre>';
  // // print '<pre>'; print_r("status"); print '</pre>';
  // // print '<pre>'; print_r($payment_object); print '</pre>';
  // $status = $payment_object['items'][0]->status; // eg : refunded, captured
  // $refund_status = $payment_object['items'][0]->refund_status; // eg : full, partial
  // $amount_refunded = ($payment_object['items'][0]->amount_refunded)/100;

  $payment_id = 'pay_7Sy55njFtQdI4D';
  $payment = $api->payment->fetch($payment_id);
  print '<pre>'; print_r("payment"); print '</pre>';
  print '<pre>'; print_r($payment); print '</pre>'; exit;


  return $output;
}
/**
 * Administration forms form payment method.
 */
function commerce_razorpay_settings_form($settings = NULL) {
  $form = array();
  $settings = (array) $settings + array(
    'key_id' => '',
    'key_secret' => '',
    'url' => '',
  );
  $form['key_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Key ID'),
    '#default_value' => $settings['key_id'],
  );
  $form['key_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Key Secret'),
    '#default_value' => $settings['key_secret'],
  );
  $url = array(0 => t('Test'),1 => t('Production'));
  $form['url'] = array(
    '#type' => 'radios',
    '#title' => t('Base URI'),
    '#options' => $url,
    '#default_value' => $settings['url'],
  );
  return $form;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_razorpay_commerce_payment_method_info() {
  // $icon = _commerce_payumoney_icons();
  $display_title = t('Razorpay');
  $payment_methods = array();
  $payment_methods['commerce_razorpay'] = array(
    'title' => t("RazorPay"),
    'display_title' => $display_title,
    'short_title' => 'RazorPay Payment Gateway',
    'description' => t("RazorPay Payment Gateway"),
    'active' => TRUE,
    'terminal' => TRUE,
    'offsite' => TRUE,
    'offsite_autoredirect' => FALSE,
    // 'callbacks' => array('redirect_form' => 'commerce_razorpay_commerce_payment_method_redirect_form'),
  );
  return $payment_methods;
}

/**
 * Implements hook_commerce_checkout_pane_info().
 */
// function commerce_razorpay_commerce_checkout_pane_info() {
//   $checkout_panes = array();

//   $checkout_panes['commerce_razorpay'] = array(
//     'title' => t('Payment'),
//     'page' => 'review',
//     'file' => 'includes/commerce_payment.checkout_pane.inc',
//     'base' => 'commerce_payment_pane',
//     'weight' => 10,
//   );

//   $checkout_panes['commerce_razorpay_redirect'] = array(
//     'title' => t('Off-site payment redirect'),
//     'page' => 'payment',
//     'locked' => TRUE,
//     'file' => 'includes/commerce_payment.checkout_pane.inc',
//     'base' => 'commerce_payment_redirect_pane',
//   );

//   return $checkout_panes;
// }

/**
 * Implements CALLBACK_commerce_payment_method_redirect_form().
 */
function commerce_razorpay_redirect_form($form, &$form_state, $order, $payment_method) {
  global $base_url;
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $billing_address = $wrapper->commerce_customer_billing->commerce_customer_address->value();
  $commerce_order_id = $order->order_id;
  $key_id = $payment_method['settings']['key_id'];
  $key_secret = $payment_method['settings']['key_secret'];

  $currency = $wrapper->commerce_order_total->currency_code->value();
  $amount = $wrapper->commerce_order_total->amount->value();
  $receipt = "test_1";
  $payment_capture = false;
  $notes  = '';

  $razorpay_order = razorpay_order($amount, $key_id, $key_secret, $currency, $receipt, $payment_capture, $notes);
  $merchant_order_id = $razorpay_order->id;
  $order->data['merchant_order_id'] = $merchant_order_id;
  $order->data['payment_method_instance_id'] = $payment_method['instance_id'];
  commerce_order_save($order);

  $form['help']['#markup'] = '<div class="checkout-help">' . t('Please wait while you are redirected to the payment server. If nothing happens within 10 seconds, please click on the button below.') . '</div>';

  $form['razor_payment_id'] = array(
    '#attributes' => array('id' => 'razor-payment-id'),
     '#type' => 'hidden',
     '#value' => '',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#id' => 'rzp-button1',
    '#value' => t('Proceed to payment'),
  );
  $form['#attached']['js'][] = "https://checkout.razorpay.com/v1/checkout.js";

  drupal_add_js(array('commerce_razorpay' => array('amount' => $amount, 'key' => $key_id, 'logo' => $base_url . "/" . drupal_get_path('module', 'commerce_razorpay') .'/logo.jpg', 'order_id' => $merchant_order_id, 'commerce_order_id' => $commerce_order_id, 'payment_settings' => $payment_method['settings'], 'billing_address' => $billing_address)), array('type' => 'setting'));

  $form['#attached']['js'][] = drupal_get_path('module', 'commerce_razorpay') . '/commerce_razorpay.js';

  return array(
    'form' => array(
      '#type' => 'markup',
      '#markup' => drupal_render($form),
    ),
  );

}

/**
 * Implements hook_redirect_form_validate().
 */
function commerce_razorpay_submit_form_validate($order, $payment_method) {
  // This is getting called.
  // print '<pre>'; print_r("submit validate form"); print '</pre>';
  // print '<pre>'; print_r("REQUEST"); print '</pre>';
  // print '<pre>'; print_r($_REQUEST); print '</pre>';
  // exit;
}
/**
 * Payment method callback: submit form submission.
 */
function commerce_razorpay_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  // Trying to get razorpay payement id.

  // Just as an example, we might store information in the order object from the
  // payment parameters, though we would never save a full credit card number,
  // even in examples!
  // $number = $pane_values['credit_card']['number'];
  // $pane_values['credit_card']['number'] = substr($number, 0, 4) . str_repeat('-', strlen($number) - 8) . substr($number, -4);

  // $order->data['commerce_payment_example'] = $pane_values;

  // Every attempted transaction should result in a new transaction entity being
  // created for the order to log either the success or the failure.
  // print '<pre>'; print_r("order"); print '</pre>';
  // print '<pre>'; print_r($order); print '</pre>';

  // print '<pre>'; print_r("request submit"); print '</pre>';
  // print '<pre>'; print_r($_REQUEST); print '</pre>';exit;

  // commerce_razorpay_transaction($payment_method, $order, $charge);
}

/**
 * Creates an example payment transaction for the specified charge amount.
 *
 * @param $payment_method
 *   The payment method instance object used to charge this payment.
 * @param $order
 *   The order object the payment applies to.
 * @param $charge
 *   An array indicating the amount and currency code to charge.
 */
function commerce_razorpay_transaction($key_id, $key_secret, $order) {

  require 'libraries/razorpay-php/Razorpay.php';
  // use Razorpay\Api\Api;
  // $key_id = $payment_method['settings']['key_id'];
  // $key_secret = $payment_method['settings']['key_secret'];
  $api = new Api($key_id, $key_secret);
  // print '<pre>'; print_r("order"); print '</pre>';
  // print '<pre>'; print_r($order); print '</pre>';
  // print '<pre>'; print_r("payment method"); print '</pre>';
  // print '<pre>'; print_r($payment_method); print '</pre>'; exit;

  // Need to store razorpay payment id in transaction .. this all is hit and trial.

  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $currency = $wrapper->commerce_order_total->currency_code->value();
  $amount = $wrapper->commerce_order_total->amount->value();
  // $receipt = "test_1";
  // $payment_capture = false;
  // $notes  = '';

  // $razorpay_order = razorpay_order($amount, $key_id, $key_secret, $currency, $receipt, $payment_capture, $notes);
  // $merchant_order_id = $razorpay_order->id;
  // $order->data['merchant_order_id'] = $merchant_order_id;
  // commerce_order_save($order);

  $payment = $api->order->fetch($order->data['merchant_order_id']);

  $payment_object = $payment->payments();

  $status = $payment_object['items'][0]->status; // eg : refunded, captured, authorized, failed.
  $refund_status = $payment_object['items'][0]->refund_status; // eg : full, partial
  $amount_refunded = ($payment_object['items'][0]->amount_refunded)/100;
  $service_tax = $payment_object['items'][0]->service_tax;
  // card_id

  $transaction = commerce_payment_transaction_new('commerce_razorpay', $order->order_id);
  // $transaction->instance_id = $payment_method['instance_id'];
  $transaction->instance_id = $order->data['payment_method_instance_id'];
  $transaction->amount = $amount;
  $transaction->currency_code = $currency;
  // $transaction->remote_id = $txnid;
  $instance = explode('|', $transaction->instance_id);
  $transaction->payment_method = $instance[0];
  // $transaction->message = '';
  $transaction->message = 'Razorpay ....';
  $transaction->message_variables = '';


  //
  // Succeessful.
  if ($status == "captured") {
    // Status is success.
    $transaction->remote_status = t('Success');
    $transaction->message = t('Your transation ID is :') . t('. Payment received at') . ' ' . date("d-m-Y H:i:s", REQUEST_TIME);
    $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  }
  elseif ($status == "authorized") {
    // Batch process - Pending orders.
    $transaction->remote_status = t('Pending');
    $transaction->message = t('Your transation ID is :') . t('. Payment pending at') . ' ' . date("d-m-Y H:i:s", REQUEST_TIME);
    $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
  }
  elseif ($status == "failed") {
    // Failed transaction.
    $transaction->remote_status = t('Failure');
    $transaction->message = t('Your transation ID is :') . t('. Payment failed at') . ' ' . date("d-m-Y H:i:s", REQUEST_TIME);
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
  }
  commerce_payment_transaction_save($transaction);




  // print '<pre>'; print_r("payment method"); print '</pre>';
  // print '<pre>'; print_r($payment_method); print '</pre>';
  // print '<pre>'; print_r("order"); print '</pre>';
  // print '<pre>'; print_r($order); print '</pre>';
  // exit;


  // $card_details = $order->data['commerce_payment_example']['credit_card'];

  // $transaction->amount = $charge['amount'];
  // $transaction->currency_code = $charge['currency_code'];
  //
  //
  //
  //
  // $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;


  // $transaction->message_variables = array(
  //   '@number' => $card_details['number'],
  //   '@month' => $card_details['exp_month'],
  //   '@year' => $card_details['exp_year'],
  // );

  // commerce_payment_transaction_save($transaction);
  // return $transaction;
  //
  //


  // $wrapper = entity_metadata_wrapper('commerce_order', $order);
  // $currency = $wrapper->commerce_order_total->currency_code->value();
  // $amount = $wrapper->commerce_order_total->amount->value();

  // $transaction = commerce_payment_transaction_new('commerce_razorpay', $order->order_id);
  // $transaction->instance_id = $payment_method['instance_id'];
  // $transaction->amount = $amount;
  // $transaction->currency_code = $currency;
  // $transaction->remote_id = $txnid;
  // $transaction->payload = $payload;
  // $instance = explode('|', $payment_method['instance_id']);
  // $transaction->payment_method = $instance[0];
  // $transaction->message = '';
  // $transaction->message_variables = '';

  // // Succeessful.
  // if ($status == "success") {
  //   $transaction->remote_status = t('Success');
  //   $transaction->message = t('Your transation ID is :') . $txnid . t('. Payment received at') . ' ' . date("d-m-Y H:i:s", REQUEST_TIME);
  //   $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  // }
  // elseif ($status == "pending") {
  //   // Batch process - Pending orders.
  //   $transaction->remote_status = t('Pending');
  //   $transaction->message = t('Your transation ID is :') . $txnid . t('. Payment pending at') . ' ' . date("d-m-Y H:i:s", REQUEST_TIME);
  //   $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
  // }
  // elseif ($status == "failure") {
  //   // Failed transaction.
  //   $transaction->remote_status = t('Failure');
  //   $transaction->message = t('Your transation ID is :') . $txnid . t('. Payment failed at') . ' ' . date("d-m-Y H:i:s", REQUEST_TIME);
  //   $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
  // }
  // commerce_payment_transaction_save($transaction);
}


function commerce_razorpay_capture_payment($payment_id = '') {
  $payment_id = $_GET['payment_id'];
  $amount = $_GET['amount'];
$commerce_order_id = $_GET['order_id'];
$order_id = '';
$payment_settings = json_decode($_GET['payment_settings']);

$payment = capture_payment($payment_id, $amount, $order_id, $payment_settings);

$response = json_decode($_GET['response']);
// print '<pre>'; print_r("payment settings"); print '</pre>';
// print '<pre>'; print_r($payment_settings); print '</pre>';exit;

$razorpay_signature = $response->razorpay_signature;
$razorpay_payment_id = $response->razorpay_payment_id;
$razorpay_order_id = $response->razorpay_order_id;
$key_id = $payment_settings->key_id;
$key_secret = $payment_settings->key_secret;
// print '<pre>'; print_r("response"); print '</pre>';
// print '<pre>'; print_r($response); print '</pre>';exit;

$order = commerce_order_load($commerce_order_id);
// print '<pre>'; print_r("order here"); print '</pre>';
// print '<pre>'; print_r($order); print '</pre>';exit;
$order->data['razorpay_payment_id'] = $payment_id;
// $order->data['merchant_order_id'] = $razorpay_order_id;
commerce_order_save($order);


commerce_razorpay_transaction($key_id, $key_secret, $order);
// print '<pre>'; print_r("order here"); print '</pre>';
// print '<pre>'; print_r($order); print '</pre>';exit;
// Send the customer on to the next checkout page.

// hash_hmac('sha256', 'Message', 'secret', true);
$generated_signature = hash_hmac('sha256', $razorpay_order_id + "|" + $razorpay_payment_id, $key_secret);
// $generated_signature = hmac_sha256($razorpay_order_id + "|" + $razorpay_payment_id, $secret);

// print '<pre>'; print_r("generated signature"); print '</pre>';
// print '<pre>'; print_r($generated_signature); print '</pre>';
// print '<pre>'; print_r("razorpay signature"); print '</pre>';
// print '<pre>'; print_r($razorpay_signature); print '</pre>';exit;
  if ($generated_signature == $razorpay_signature) {
    // payment is successful
  }


      commerce_payment_redirect_pane_next_page($order, t('Customer successfully submitted payment at the payment gateway.'));
      drupal_goto(commerce_checkout_order_uri($order));


}

/**
 * Process a Void or Force transaction.
 *
 * @param $transaction
 *  The Transaction entity.
 * @param $payment_method
 *   The payment method instance array associated with this API request.
 * @param $amount
 *   Current transaction amount.
 * @param $action
 *   Transaction type, 'Void' or 'Force' supported.
 * @return bool
 *  Return TRUE on success.
 * @see TransactServices.svc/ProcessCreditCard (Transaction API Guide)
 */
function commerce_razorpay_transaction_request($transaction, $payment_method, $amount, $action) {
  // Action can be Void, Capture.
  // Build the base profile request data.
  $api_request_data = array(
    'TransType' => $action,
     // The PNRef number of the original sale transaction.
    'PNRef' => $transaction->remote_id,
    'Amount' => $amount,
    'ExtData' => '<AuthCode>' . $transaction->data['auth_code']['0'] . '</AuthCode>',
    'CardNum' => '',
    'NameOnCard' => '',
    'ExpDate' => '',
    'Street' => '',
    'Zip' => '',
    'MagData' => '',
    'InvNum' => '',
    'CVNum' => '',
  );
  $payment_method['settings']['txn_payleap_type'] = $action == 'Void' ? PAYLEAP_TXN_TYPE_VOID : PAYLEAP_TXN_TYPE_FORCE;
  $response = commerce_payleap_request($payment_method, $api_request_data);

  $result = TRUE;
  $transaction->payload[REQUEST_TIME] = isset($response['xml']) ? $response['xml']->asXML() : '';

  // If we didn't get an approval response code...
   if (!$response['status']) {
    // Display an error message but leave the transaction pending.
    drupal_set_message(t('PayLeap request failed'), 'error');
    drupal_set_message(check_plain($response['msg']), 'error');
    $result =  FALSE;
   }
   else {
     drupal_set_message(t('@action request successfully.', array('@action' => $action)));
     // Update to new remote ID.
     $transaction->remote_id = isset($response['xml']->PNRef) ? (string) $response['xml']->PNRef : '';
     // Update the transaction amount to the actual capture amount.
     $transaction->data['auth_code'][] = isset($response['xml']) && isset($response['xml']->AuthCode) ? (string) $response['xml']->AuthCode : '';

     if ($response['status']) {
       // Set the remote and local status accordingly.
       switch ($action) {
         case 'Void':
           $transaction->status = PAYLEAP_PAYMENT_STATUS_CANCELED;
           break;
         case 'Force':
           $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
           break;
       }
       $transaction->amount = commerce_currency_decimal_to_amount($amount, $transaction->currency_code);
     }
     $transaction->remote_status = $response['status'];
     $transaction->payload[REQUEST_TIME] = isset($response['xml']) ? $response['xml']->asXML() : '';

     // Append a capture indication to the result message.
     $transaction->message .= implode('<br />', commerce_payleap_get_log_message($response, $payment_method['settings']['txn_payleap_type']));
   }
   commerce_payment_transaction_save($transaction);
   return $result;
}


/**
 * Determines access to the prior authorization capture form for Amex
 *   hosted credit card transactions.
 *
 * @param $order
 *   The order the transaction is on.
 * @param $transaction
 *   The payment transaction object to be captured.
 *
 * @return
 *   TRUE or FALSE indicating capture access.
 */
function commerce_razorpay_refund_access($order, $transaction) {
  return TRUE;
}


/**
 * Refund a transaction
 * @param object $capture_transaction
 *   Transaction to be refunded
 * @param decimal $amount
 *   Ammount to be refunded as a decimal
 * @return boolean
 */
function commerce_razorpay_refund_transaction($capture_transaction, $amount, $order, $payment_method) {
  $return = FALSE;

  require 'libraries/razorpay-php/Razorpay.php';
  // use Razorpay\Api\Api;
  $key_id = $payment_method['settings']['key_id'];
  $key_secret = $payment_method['settings']['key_secret'];
  $api = new Api($key_id, $key_secret);

  // print '<pre>'; print_r("capture transaction"); print '</pre>';
  // print '<pre>'; print_r($capture_transaction); print '</pre>';exit;
  $instance_id = $capture_transaction->instance_id;
  $payment_method = commerce_payment_method_instance_load($instance_id);
  // print '<pre>'; print_r("payment method"); print '</pre>';
  // print '<pre>'; print_r($payment_method); print '</pre>';exit;

  // $auth_transaction_id = $capture_transaction->data->order->reference;
  // $auth_transaction = $capture_transaction->transaction_id;

  $transaction = commerce_payment_transaction_new('commerce_razorpay', $capture_transaction->order_id);
  $transaction->amount = - commerce_currency_decimal_to_amount($amount, $capture_transaction->currency_code);
  $transaction->currency_code = $capture_transaction->currency_code;
  $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->remote_id = $capture_transaction->remote_id;

  commerce_payment_transaction_save($transaction);

  // $data = new stdClass();

  // $data->apiOperation = 'REFUND';

  // $data->order['reference'] = $auth_transaction_id;

  // $data->transaction['amount'] = $amount;
  // $data->transaction['currency'] = $transaction->currency_code;
  // $data->transaction['reference'] = $transaction->transaction_id;

  // $data->sourceOfFunds['session'] = $transaction->remote_id;
  // $data->sourceOfFunds['type'] = 'CARD';

  // $url = $payment_method['settings']['txn_url'] . AMEX_TXN_PATH . $payment_method['settings']['merchant_id'] . '/order/' . (10000000000 + $auth_transaction_id) . '/transaction/' . $transaction->transaction_id;

  // $transaction->payload = $result;



  $payment = $api->order->fetch($order->data['merchant_order_id']);
  $payment_object = $payment->payments();
  // print '<pre>'; print_r("payment"); print '</pre>';
  // print '<pre>'; print_r($payment_object); print '</pre>';
  // print '<pre>'; print_r("status"); print '</pre>';
  // print '<pre>'; print_r($payment_object); print '</pre>';
  $status = $payment_object['items'][0]->status; // eg : refunded, captured
  $refund_status = $payment_object['items'][0]->refund_status; // eg : full, partial
  $amount_refunded = ($payment_object['items'][0]->amount_refunded)/100;
  // card_id

  // print '<pre>'; print_r("status"); print '</pre>';
  // print '<pre>'; print_r($status); print '</pre>';

  // exit;



  switch ($status) {
    case 'refunded':
      $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
      // $transaction->remote_status = $result->response->gatewayCode;
      $transaction->remote_status = $status;
      $transaction->message = 'Refunded';
      drupal_set_message(t('Transaction was processed succesfully'));
      $return = TRUE;
      break;
    case 'partial':
      $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $transaction->remote_status = $status;
      $transaction->message = 'Refunded';
      drupal_set_message(t('Transaction was processed succesfully, Partial refund of amount'. $amount_refunded .' was done'));
      $return = TRUE;
      break;
    case 'PENDING':
      $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
      $transaction->remote_status = $result->response->gatewayCode;
      $transaction->message = $result->response->acquirerMessage;
      drupal_set_message(t('Transaction pending'));
      $return = TRUE;
      break;
    case 'FAILURE':
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      $transaction->remote_status = $result->response->gatewayCode;
      $transaction->message = $result->response->acquirerMessage;
      break;
    case 'UNKNOWN':
      drupal_set_message(t('There was a problem processing your transaction. Your credit/debit card was not charged. Please try again later.'), 'error');
      break;
    case 'ERROR':
      $transaction = _commerce_razorpay_error_process($result, $transaction);
      break;
  }


// if ($auth_transaction->amount == 0 ) {
//     $auth_transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
//   }

//   commerce_payment_transaction_save($transaction);
//   commerce_payment_transaction_save($auth_transaction);

  commerce_payment_transaction_save($transaction);
  return $return;
}

function _commerce_razorpay_error_process($result, $transaction) {
  if (isset($result->error)) {
    $transaction->remote_status = $result->error->cause;
    switch ($transaction->remote_status) {
      case 'INVALID_REQUEST':
      case 'SERVER_BUSY':
        $transaction->message = $result->error->explanation;
        break;
      case 'REQUEST_REJECTED':
        $transaction->message = 'Request rejected: Code ' . $result->error->supportCode;
        break;
      case 'SERVER_FAILED':
        $transaction->message = 'Remote server error.';
        break;
    }
    commerce_payment_transaction_save($transaction);
  }
  return $transaction;
}

/**
 * Create an order.
 * @return [type] [description]
 */
function razorpay_order($amount, $key_id, $key_secret, $currency, $receipt, $payment_capture, $notes = '') {
  require 'libraries/razorpay-php/Razorpay.php';
  $api = new Api($key_id, $key_secret);
  $order = $api->order->create(array('amount' => $amount, "currency" => $currency, "receipt" => $receipt, 'payment_capture' => $payment_capture));

   return $order;
}

function get_payments($count = 2, $skip = 1, $from = 1400826740) {
  $api = new Api('rzp_test_6VOiSPZ8ClqeCo', 'HSFl7YizDJttZmxHi2a3123T');
  $params = array(
      'count' => 2,
      'skip'  => 1,
      'from'  => 1400826740,
      'order'
  );

  $payments = $api->payment->all($params);

}

function capture_payment($payment_id, $amount = '', $order_id = '', $payment_settings = '') {
  $fb_lib_path = function_exists('libraries_get_path') ? libraries_get_path('razorpay-php') : 'sites/all/libraries/razorpay-php';

  require 'libraries/razorpay-php/Razorpay.php';
  // require '/var/www/npro/libraries/razorpay-php/Razorpay.php';
  $key_id = $payment_settings->key_id;
  $key_secret = $payment_settings->key_secret;
  $api = new Api($key_id, $key_secret);
  $amount = $_GET['amount'];
  $payment = $api->payment->fetch($payment_id);
  $payment->capture(array('amount' => $amount));
  $order_id = $_GET['order_id'];
// Success URL: checkout/ORDER_ID/payment/return/ORDER_PAYMENT_REDIRECT_KEY

if($payment->status == 'authorized') {
} else {
  print '<pre>'; print_r("payment status"); print '</pre>';
  print '<pre>'; print_r($payment->status); print '</pre>'; exit;
}
// Fail URL: checkout/ORDER_ID/payment/back/ORDER_PAYMENT_REDIRECT_KEY


return $payment;
}


/**
 * Retrieve a refund of payment by id.
 * @param  {[type]} $payment_id [description]
 * @param  {[type]} $refund_id  [description]
 * @return {[type]}             [description]
 */

function razorpay_payment_refund($payment_id = 'pay_29QQoUBi66xm2f', $refund_id = 'rfnd_AABBdHIieexn5c') {


  $api = new Api('rzp_test_26ccbdbfe0e84b', '69b2e24411e384f91213f22a');

  $payment = $api->payment->fetch($payment_id)->refunds()->fetch($refund_id);

}

function razorpay_payment_all_refunds($payment_id = 'pay_29QQoUBi66xm2f', $from = 1500826740, $to = 1500826760, $count = 2, $skip = 1) {
  $api = new Api('rzp_test_26ccbdbfe0e84b', '69b2e24411e384f91213f22a');

  $params = array(
      'from'  => 1500826740,
      'to'    => 1500826760,
      'count' => 2,
      'skip'  => 1
  );

  $payments = $api->payment->fetch($payment_id)->refunds()->all($params);

}
