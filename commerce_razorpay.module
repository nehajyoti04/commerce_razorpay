<?php
use Razorpay\Api\Api;

/**
 * Administration forms form payment method.
 */
function commerce_razorpay_settings_form($settings = NULL) {
  $form = array();
  $settings = (array) $settings + array(
    'key_id' => '',
    'key_secret' => '',
    'url' => '',
  );
  $form['key_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Key ID'),
    '#default_value' => $settings['key_id'],
  );
  $form['key_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Key Secre'),
    '#default_value' => $settings['key_secret'],
  );
  $url = array(0 => t('Test'),1 => t('Production'));
  $form['url'] = array(
    '#type' => 'radios',
    '#title' => t('Base URI'),
    '#options' => $url,
    '#default_value' => $settings['url'],
  );
  return $form;
}

/**
 * Implements hook_menu().
 */
function commerce_razorpay_menu() {

$items['razorpay-checkout'] = array(
    'title' => 'Administration menu',
    'description' => 'Adjust administration menu settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_razorpay_checkout_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'commerce_razorpay.checkout.inc',
  );

$items['capture-payment'] = array(
    'title' => 'Capture Payement',
    'description' => 'Adjust administration menu settings.',
    'page callback' => 'commerce_razorpay_capture_payment',
    'access arguments' => array('administer site configuration'),
  );
return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_razorpay_commerce_payment_method_info() {
  // $icon = _commerce_payumoney_icons();
  $display_title = t('Razorpay');
  $payment_methods = array();
  $payment_methods['commerce_razorpay'] = array(
    'title' => t("RazorPay"),
    'display_title' => $display_title,
    'short_title' => 'RazorPay Payment Gateway',
    'description' => t("RazorPay Payment Gateway"),
    'active' => TRUE,
    'terminal' => TRUE,
    'offsite' => TRUE,
    'offsite_autoredirect' => FALSE,
    // 'callbacks' => array('redirect_form' => 'commerce_razorpay_commerce_payment_method_redirect_form'),
  );
  return $payment_methods;
}

/**
 * Create an order.
 * @return [type] [description]
 */
function razorpay_order($amount) {
// $name = 'razorpay-php';
// if (($library = libraries_load($name)) && !empty($library['loaded'])) {
//   $fb_lib_path = function_exists('libraries_get_path') ? libraries_get_path('razorpay-php') : 'sites/all/libraries/razorpay-php';

  // require '/var/www/npro/libraries/razorpay-php/Razorpay.php';
  require 'libraries/razorpay-php/Razorpay.php';
 
$api = new Api('rzp_test_6VOiSPZ8ClqeCo', 'HSFl7YizDJttZmxHi2a3123T');
$order = $api->order->create(array('amount' => $amount, "currency" => "INR", "receipt" => "test_1"));

     return $order;


//  try {
//      // if (!class_exists('Api') && !@include($fb_platform)) {
//      if(!@include($fb_platform)){
//       //show error
//       watchdog('commerce_razorpay', 'class does not exist');
//       return NULL;
//      }
//      // $fb = new Facebook(array(
//      //   'appId' => $appId,
//      //   'secret' => $secret,
//      //   'cookie' => $cookie));
//      $api = new Api('rzp_test_26ccbdbfe0e84b', '69b2e24411e384f91213f22a');
//      $order = $api->order->create(array('amount' => 100, "currency", "INR", "receipt", "test_1", "payment_capture", false));
//      // print '<pre>'; print_r("order"); print '</pre>';
//      // print '<pre>'; print_r($order); print '</pre>';exit;
//      return $order;
//  }
//  catch (Exception $e) {}


// $order = $api->order->create(array('amount' => 100, "currency", "INR", "receipt", "test_1", "payment_capture", false));


// return $order;
}

/**
 * Implements CALLBACK_commerce_payment_method_redirect_form().
 */
function commerce_razorpay_redirect_form($form, &$form_state, $order, $payment_method) {
// $form = array();
    $commerce_order_id = $order->order_id;
    $amount = $order->commerce_order_total[LANGUAGE_NONE][0]['amount'];
    $key = $payment_method['settings']['key_id'];
    $order = razorpay_order($amount);
    $order_id = $order->id;
    // $order_id = '';
    // $commerce_order_id = arg(1);
    // $amount = 100;

    
      $form['help']['#markup'] = '<div class="checkout-help">' . t('Please wait while you are redirected to the payment server. If nothing happens within 10 seconds, please click on the button below.') . '</div>';

      $form['razor_payment_id'] = array(
        '#attributes' => array('id' => 'razor-payment-id'),
         '#type' => 'hidden',
         '#value' => '',
      );
     
  $form['submit'] = array(
    '#type' => 'submit',
    '#id' => 'rzp-button1',
    '#value' => t('Proceed to payment'),
  );
  $form['#attached']['js'][] = "https://checkout.razorpay.com/v1/checkout.js";


drupal_add_js(array('commerce_razorpay' => array('amount' => $amount, 'key' => $key, 'logo' => drupal_get_path('module', 'commerce_razorpay') .'/logo.jpg', 'order_id' => $order_id, 'commerce_order_id' => $commerce_order_id, 'payment_settings' => $payment_method['settings'])), array('type' => 'setting'));
$form['#attached']['js'][] = drupal_get_path('module', 'commerce_razorpay') . '/commerce_razorpay.js';

  return array(
    'form' => array(
      '#type' => 'markup',
      '#markup' => drupal_render($form),
    ),
  );

}

/**
 * Payment method callback: submit form submission.
 */
function commerce_razorpay_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  // Just as an example, we might store information in the order object from the
  // payment parameters, though we would never save a full credit card number,
  // even in examples!
  // $number = $pane_values['credit_card']['number'];
  // $pane_values['credit_card']['number'] = substr($number, 0, 4) . str_repeat('-', strlen($number) - 8) . substr($number, -4);

  // $order->data['commerce_payment_example'] = $pane_values;

  // Every attempted transaction should result in a new transaction entity being
  // created for the order to log either the success or the failure.
  commerce_razorpay_transaction($payment_method, $order, $charge);
}

/**
 * Creates an example payment transaction for the specified charge amount.
 *
 * @param $payment_method
 *   The payment method instance object used to charge this payment.
 * @param $order
 *   The order object the payment applies to.
 * @param $charge
 *   An array indicating the amount and currency code to charge.
 */
function commerce_razorpay_transaction($payment_method, $order, $charge) {
  // $card_details = $order->data['commerce_payment_example']['credit_card'];

  $transaction = commerce_payment_transaction_new('commerce_payment_example', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;

  $transaction->message = 'Razorpay ....';
  // $transaction->message_variables = array(
  //   '@number' => $card_details['number'],
  //   '@month' => $card_details['exp_month'],
  //   '@year' => $card_details['exp_year'],
  // );

  commerce_payment_transaction_save($transaction);
  return $transaction;

  // $wrapper = entity_metadata_wrapper('commerce_order', $order);
  // $currency = $wrapper->commerce_order_total->currency_code->value();
  // $amount = $wrapper->commerce_order_total->amount->value();

  // $transaction = commerce_payment_transaction_new('commerce_razorpay', $order->order_id);
  // $transaction->instance_id = $payment_method['instance_id'];
  // $transaction->amount = $amount;
  // $transaction->currency_code = $currency;
  // $transaction->remote_id = $txnid;
  // $transaction->payload = $payload;
  // $instance = explode('|', $payment_method['instance_id']);
  // $transaction->payment_method = $instance[0];
  // $transaction->message = '';
  // $transaction->message_variables = '';

  // // Succeessful.
  // if ($status == "success") {
  //   $transaction->remote_status = t('Success');
  //   $transaction->message = t('Your transation ID is :') . $txnid . t('. Payment received at') . ' ' . date("d-m-Y H:i:s", REQUEST_TIME);
  //   $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  // }
  // elseif ($status == "pending") {
  //   // Batch process - Pending orders.
  //   $transaction->remote_status = t('Pending');
  //   $transaction->message = t('Your transation ID is :') . $txnid . t('. Payment pending at') . ' ' . date("d-m-Y H:i:s", REQUEST_TIME);
  //   $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
  // }
  // elseif ($status == "failure") {
  //   // Failed transaction.
  //   $transaction->remote_status = t('Failure');
  //   $transaction->message = t('Your transation ID is :') . $txnid . t('. Payment failed at') . ' ' . date("d-m-Y H:i:s", REQUEST_TIME);
  //   $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
  // }
  // commerce_payment_transaction_save($transaction);
}


function commerce_razorpay_capture_payment($payment_id = '') {
  $payment_id = $_GET['payment_id'];
  $amount = $_GET['amount'];
$commerce_order_id = $_GET['order_id'];
$order_id = '';
$payment_settings = json_decode($_GET['payment_settings']);

$payment = capture_payment($payment_id, $amount, $order_id, $payment_settings);


$order = commerce_order_load($commerce_order_id);
// Send the customer on to the next checkout page.
      commerce_payment_redirect_pane_next_page($order, t('Customer successfully submitted payment at the payment gateway.'));
      drupal_goto(commerce_checkout_order_uri($order));


}

function get_payments($count = 2, $skip = 1, $from = 1400826740) {
  $api = new Api('rzp_test_6VOiSPZ8ClqeCo', 'HSFl7YizDJttZmxHi2a3123T');
  $params = array(
      'count' => 2,
      'skip'  => 1,
      'from'  => 1400826740,
      'order'
  );

  $payments = $api->payment->all($params);

}

function capture_payment($payment_id, $amount = '', $order_id = '', $payment_settings = '') {
  $fb_lib_path = function_exists('libraries_get_path') ? libraries_get_path('razorpay-php') : 'sites/all/libraries/razorpay-php';

  require 'libraries/razorpay-php/Razorpay.php';
  // require '/var/www/npro/libraries/razorpay-php/Razorpay.php';
  $key_id = $payment_settings->key_id;
  $key_secret = $payment_settings->key_secret;
  $api = new Api($key_id, $key_secret);
  $amount = $_GET['amount'];
  $payment = $api->payment->fetch($payment_id);
  $payment->capture(array('amount' => $amount));
  $order_id = $_GET['order_id'];
// Success URL: checkout/ORDER_ID/payment/return/ORDER_PAYMENT_REDIRECT_KEY

if($payment->status == 'authorized') {
} else {
  print '<pre>'; print_r("payment status"); print '</pre>';
  print '<pre>'; print_r($payment->status); print '</pre>'; exit;
}
// Fail URL: checkout/ORDER_ID/payment/back/ORDER_PAYMENT_REDIRECT_KEY


return $payment;
}
/**
 * Retrieve a refund of payment by id.
 * @param  {[type]} $payment_id [description]
 * @param  {[type]} $refund_id  [description]
 * @return {[type]}             [description]
 */

function razorpay_payment_refund($payment_id = 'pay_29QQoUBi66xm2f', $refund_id = 'rfnd_AABBdHIieexn5c') {


  $api = new Api('rzp_test_26ccbdbfe0e84b', '69b2e24411e384f91213f22a');

  $payment = $api->payment->fetch($payment_id)->refunds()->fetch($refund_id);

}

function razorpay_payment_all_refunds($payment_id = 'pay_29QQoUBi66xm2f', $from = 1500826740, $to = 1500826760, $count = 2, $skip = 1) {
  $api = new Api('rzp_test_26ccbdbfe0e84b', '69b2e24411e384f91213f22a');

  $params = array(
      'from'  => 1500826740,
      'to'    => 1500826760,
      'count' => 2,
      'skip'  => 1
  );

  $payments = $api->payment->fetch($payment_id)->refunds()->all($params);

}

/**
 * Create an order.
 * @return [type] [description]
 */
// function create_an_order($amount) {
// $name = 'razorpay-php';
// // if (($library = libraries_load($name)) && !empty($library['loaded'])) {

//   $fb_lib_path = function_exists('libraries_get_path') ? libraries_get_path('razorpay-php') : 'sites/all/libraries/razorpay-php';

//   // require '/var/www/npro/libraries/razorpay-php/Razorpay.php';
//   require 'libraries/razorpay-php/Razorpay.php';
 
// $api = new Api('rzp_test_6VOiSPZ8ClqeCo', 'HSFl7YizDJttZmxHi2a3123T');
// $order = $api->order->create(array('amount' => $amount, "currency" => "INR", "receipt" => "test_1"));

//      return $order;


//  try {
//      // if (!class_exists('Api') && !@include($fb_platform)) {
//      if(!@include($fb_platform)){
//       //show error
//       watchdog('commerce_razorpay', 'class does not exist');
//       return NULL;
//      }
//      // $fb = new Facebook(array(
//      //   'appId' => $appId,
//      //   'secret' => $secret,
//      //   'cookie' => $cookie));
//      $api = new Api('rzp_test_26ccbdbfe0e84b', '69b2e24411e384f91213f22a');
//      $order = $api->order->create(array('amount' => 100, "currency", "INR", "receipt", "test_1", "payment_capture", false));
//      // print '<pre>'; print_r("order"); print '</pre>';
//      // print '<pre>'; print_r($order); print '</pre>';exit;
//      return $order;
//  }
//  catch (Exception $e) {}


// $order = $api->order->create(array('amount' => 100, "currency", "INR", "receipt", "test_1", "payment_capture", false));


// return $order;
// }

/**
 * Implements hook_commerce_checkout_pane_info().
 */
function commerce_razorpay_commerce_checkout_pane_info() {
  $checkout_panes = array();

  $checkout_panes['commerce_razorpay'] = array(
    'title' => t('Payment'),
    'page' => 'review',
    'file' => 'includes/commerce_payment.checkout_pane.inc',
    'base' => 'commerce_payment_pane',
    'weight' => 10,
  );

  $checkout_panes['commerce_razorpay_redirect'] = array(
    'title' => t('Off-site payment redirect'),
    'page' => 'payment',
    'locked' => TRUE,
    'file' => 'includes/commerce_payment.checkout_pane.inc',
    'base' => 'commerce_payment_redirect_pane',
  );

  return $checkout_panes;
}

function commerce_razorpay_form_alter($form, &$form_state, $form_id) {
  global $user;
 
  if($form_id == 'commerce_checkout_form_checkout') {
  }
  if($form_id == 'commerce_checkout_form_review') {
  
  }
}
